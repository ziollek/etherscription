// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockKVSaver is a mock of KVSaver interface.
type MockKVSaver[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockKVSaverMockRecorder[T]
}

// MockKVSaverMockRecorder is the mock recorder for MockKVSaver.
type MockKVSaverMockRecorder[T any] struct {
	mock *MockKVSaver[T]
}

// NewMockKVSaver creates a new mock instance.
func NewMockKVSaver[T any](ctrl *gomock.Controller) *MockKVSaver[T] {
	mock := &MockKVSaver[T]{ctrl: ctrl}
	mock.recorder = &MockKVSaverMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVSaver[T]) EXPECT() *MockKVSaverMockRecorder[T] {
	return m.recorder
}

// Get mocks base method.
func (m *MockKVSaver[T]) Get(key string) (T, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVSaverMockRecorder[T]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVSaver[T])(nil).Get), key)
}

// Set mocks base method.
func (m *MockKVSaver[T]) Set(key string, value T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockKVSaverMockRecorder[T]) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKVSaver[T])(nil).Set), key, value)
}

// MockListSaver is a mock of ListSaver interface.
type MockListSaver[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockListSaverMockRecorder[T]
}

// MockListSaverMockRecorder is the mock recorder for MockListSaver.
type MockListSaverMockRecorder[T any] struct {
	mock *MockListSaver[T]
}

// NewMockListSaver creates a new mock instance.
func NewMockListSaver[T any](ctrl *gomock.Controller) *MockListSaver[T] {
	mock := &MockListSaver[T]{ctrl: ctrl}
	mock.recorder = &MockListSaverMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListSaver[T]) EXPECT() *MockListSaverMockRecorder[T] {
	return m.recorder
}

// Append mocks base method.
func (m *MockListSaver[T]) Append(key string, value T, ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", key, value, ttl)
}

// Append indicates an expected call of Append.
func (mr *MockListSaverMockRecorder[T]) Append(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockListSaver[T])(nil).Append), key, value, ttl)
}

// FetchAndFlush mocks base method.
func (m *MockListSaver[T]) FetchAndFlush(key string) []T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndFlush", key)
	ret0, _ := ret[0].([]T)
	return ret0
}

// FetchAndFlush indicates an expected call of FetchAndFlush.
func (mr *MockListSaverMockRecorder[T]) FetchAndFlush(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndFlush", reflect.TypeOf((*MockListSaver[T])(nil).FetchAndFlush), key)
}
